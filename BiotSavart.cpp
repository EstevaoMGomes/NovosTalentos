#include <iostream>
#include <cmath>
#include <vector>
#include <chrono>
using namespace std;

// To run the code use: "g++ ./BiotSavart.cpp -o ./bin/BiotSavart.exe" followed by "./bin/BiotSavart.exe"

# include <bit>
# include <limits>
# include <cstdint>

// evil Fast Inverse Sqrt
constexpr float Q_rsqrt(float number) noexcept
{
    static_assert(std::numeric_limits<float>::is_iec559);

    float const y = std::bit_cast<float>(
        0x5f3759df - (std::bit_cast<std::uint32_t>(number) >> 1));
    return y * (1.5f - (number * 0.5f * y * y));
}

// Biot Savart Law of a wire from A to B with current I at point r
vector<vector<double>> BiotSavart(vector<vector<double>> wire, vector<vector<double>> r, double I){
    double step = 1e-3;
    vector<vector<double>> integral(r.size(),vector<double>(3,0));
    vector<double> rprime;
    vector<double> direction(3);

    for (int i=0; i < wire.size(); i++){
        rprime = wire[i];
        vector<double> A = wire[i];
        vector<double> B;
        if(i==wire.size()-1){
            B = wire[0];
        }else{
            B = wire[i+1];
        }
        // Maybe implementing evil Fast Inverse Sqrt method to speed the process
        double wirenorm = sqrt((B[0]-A[0])*(B[0]-A[0])+(B[1]-A[1])*(B[1]-A[1])+(B[2]-A[2])*(B[2]-A[2]));
        for (int j=0; j<3; j++){
            direction[j] = (B[j]-A[j])/wirenorm;
        }
        for (int j=0; j<r.size(); j++){
            for (int n=0; n < int(wirenorm/step); n++){
                double normcubed = pow(sqrt((r[j][0]-rprime[0])*(r[j][0]-rprime[0])+(r[j][1]-rprime[1])*(r[j][1]-rprime[1])+(r[j][2]-rprime[2])*(r[j][2]-rprime[2])),3);
                integral[j][0] += 1e-7 * ((r[j][2]-rprime[2])*I*direction[1] - (r[j][1]-rprime[1])*I*direction[2])/normcubed*step;
                integral[j][1] += 1e-7 * ((r[j][0]-rprime[0])*I*direction[2] - (r[j][2]-rprime[2])*I*direction[0])/normcubed*step;
                integral[j][2] += 1e-7 * ((r[j][1]-rprime[1])*I*direction[0] - (r[j][0]-rprime[0])*I*direction[1])/normcubed*step;
                for (int i=0; i<3; i++){
                    rprime[i] = rprime[i] + direction[i] * step;
                }
            }
        }
    }
    return integral;

}

int main(void){
   vector<vector<double>> wire = 
   {{ 2.00000000e+00,  0.00000000e+00,  0.00000000e+00},
    { 1.99802673e+00,  0.00000000e+00,  6.27905195e-02},
    { 1.99211470e+00,  0.00000000e+00,  1.25333234e-01},
    { 1.98228725e+00,  0.00000000e+00,  1.87381315e-01},
    { 1.96858316e+00,  0.00000000e+00,  2.48689887e-01},
    { 1.95105652e+00,  0.00000000e+00,  3.09016994e-01},
    { 1.92977649e+00,  0.00000000e+00,  3.68124553e-01},
    { 1.90482705e+00,  0.00000000e+00,  4.25779292e-01},
    { 1.87630668e+00,  0.00000000e+00,  4.81753674e-01},
    { 1.84432793e+00,  0.00000000e+00,  5.35826795e-01},
    { 1.80901699e+00,  0.00000000e+00,  5.87785252e-01},
    { 1.77051324e+00,  0.00000000e+00,  6.37423990e-01},
    { 1.72896863e+00,  0.00000000e+00,  6.84547106e-01},
    { 1.68454711e+00,  0.00000000e+00,  7.28968627e-01},
    { 1.63742399e+00,  0.00000000e+00,  7.70513243e-01},
    { 1.58778525e+00,  0.00000000e+00,  8.09016994e-01},
    { 1.53582679e+00,  0.00000000e+00,  8.44327926e-01},
    { 1.48175367e+00,  0.00000000e+00,  8.76306680e-01},
    { 1.42577929e+00,  0.00000000e+00,  9.04827052e-01},
    { 1.36812455e+00,  0.00000000e+00,  9.29776486e-01},
    { 1.30901699e+00,  0.00000000e+00,  9.51056516e-01},
    { 1.24868989e+00,  0.00000000e+00,  9.68583161e-01},
    { 1.18738131e+00,  0.00000000e+00,  9.82287251e-01},
    { 1.12533323e+00,  0.00000000e+00,  9.92114701e-01},
    { 1.06279052e+00,  0.00000000e+00,  9.98026728e-01},
    { 1.00000000e+00,  0.00000000e+00,  1.00000000e+00},
    { 9.37209480e-01,  0.00000000e+00,  9.98026728e-01},
    { 8.74666766e-01,  0.00000000e+00,  9.92114701e-01},
    { 8.12618685e-01,  0.00000000e+00,  9.82287251e-01},
    { 7.51310113e-01,  0.00000000e+00,  9.68583161e-01},
    { 6.90983006e-01,  0.00000000e+00,  9.51056516e-01},
    { 6.31875447e-01,  0.00000000e+00,  9.29776486e-01},
    { 5.74220708e-01,  0.00000000e+00,  9.04827052e-01},
    { 5.18246326e-01,  0.00000000e+00,  8.76306680e-01},
    { 4.64173205e-01,  0.00000000e+00,  8.44327926e-01},
    { 4.12214748e-01,  0.00000000e+00,  8.09016994e-01},
    { 3.62576010e-01,  0.00000000e+00,  7.70513243e-01},
    { 3.15452894e-01,  0.00000000e+00,  7.28968627e-01},
    { 2.71031373e-01,  0.00000000e+00,  6.84547106e-01},
    { 2.29486757e-01,  0.00000000e+00,  6.37423990e-01},
    { 1.90983006e-01,  0.00000000e+00,  5.87785252e-01},
    { 1.55672074e-01,  0.00000000e+00,  5.35826795e-01},
    { 1.23693320e-01,  0.00000000e+00,  4.81753674e-01},
    { 9.51729475e-02,  0.00000000e+00,  4.25779292e-01},
    { 7.02235141e-02,  0.00000000e+00,  3.68124553e-01},
    { 4.89434837e-02,  0.00000000e+00,  3.09016994e-01},
    { 3.14168389e-02,  0.00000000e+00,  2.48689887e-01},
    { 1.77127493e-02,  0.00000000e+00,  1.87381315e-01},
    { 7.88529869e-03,  0.00000000e+00,  1.25333234e-01},
    { 1.97327157e-03,  0.00000000e+00,  6.27905195e-02},
    { 0.00000000e+00,  0.00000000e+00,  1.22464680e-16},
    { 1.97327157e-03,  0.00000000e+00, -6.27905195e-02},
    { 7.88529869e-03,  0.00000000e+00, -1.25333234e-01},
    { 1.77127493e-02,  0.00000000e+00, -1.87381315e-01},
    { 3.14168389e-02,  0.00000000e+00, -2.48689887e-01},
    { 4.89434837e-02,  0.00000000e+00, -3.09016994e-01},
    { 7.02235141e-02,  0.00000000e+00, -3.68124553e-01},
    { 9.51729475e-02,  0.00000000e+00, -4.25779292e-01},
    { 1.23693320e-01,  0.00000000e+00, -4.81753674e-01},
    { 1.55672074e-01,  0.00000000e+00, -5.35826795e-01},
    { 1.90983006e-01,  0.00000000e+00, -5.87785252e-01},
    { 2.29486757e-01,  0.00000000e+00, -6.37423990e-01},
    { 2.71031373e-01,  0.00000000e+00, -6.84547106e-01},
    { 3.15452894e-01,  0.00000000e+00, -7.28968627e-01},
    { 3.62576010e-01,  0.00000000e+00, -7.70513243e-01},
    { 4.12214748e-01,  0.00000000e+00, -8.09016994e-01},
    { 4.64173205e-01,  0.00000000e+00, -8.44327926e-01},
    { 5.18246326e-01,  0.00000000e+00, -8.76306680e-01},
    { 5.74220708e-01,  0.00000000e+00, -9.04827052e-01},
    { 6.31875447e-01,  0.00000000e+00, -9.29776486e-01},
    { 6.90983006e-01,  0.00000000e+00, -9.51056516e-01},
    { 7.51310113e-01,  0.00000000e+00, -9.68583161e-01},
    { 8.12618685e-01,  0.00000000e+00, -9.82287251e-01},
    { 8.74666766e-01,  0.00000000e+00, -9.92114701e-01},
    { 9.37209480e-01,  0.00000000e+00, -9.98026728e-01},
    { 1.00000000e+00,  0.00000000e+00, -1.00000000e+00},
    { 1.06279052e+00,  0.00000000e+00, -9.98026728e-01},
    { 1.12533323e+00,  0.00000000e+00, -9.92114701e-01},
    { 1.18738131e+00,  0.00000000e+00, -9.82287251e-01},
    { 1.24868989e+00,  0.00000000e+00, -9.68583161e-01},
    { 1.30901699e+00,  0.00000000e+00, -9.51056516e-01},
    { 1.36812455e+00,  0.00000000e+00, -9.29776486e-01},
    { 1.42577929e+00,  0.00000000e+00, -9.04827052e-01},
    { 1.48175367e+00,  0.00000000e+00, -8.76306680e-01},
    { 1.53582679e+00,  0.00000000e+00, -8.44327926e-01},
    { 1.58778525e+00,  0.00000000e+00, -8.09016994e-01},
    { 1.63742399e+00,  0.00000000e+00, -7.70513243e-01},
    { 1.68454711e+00,  0.00000000e+00, -7.28968627e-01},
    { 1.72896863e+00,  0.00000000e+00, -6.84547106e-01},
    { 1.77051324e+00,  0.00000000e+00, -6.37423990e-01},
    { 1.80901699e+00,  0.00000000e+00, -5.87785252e-01},
    { 1.84432793e+00,  0.00000000e+00, -5.35826795e-01},
    { 1.87630668e+00,  0.00000000e+00, -4.81753674e-01},
    { 1.90482705e+00,  0.00000000e+00, -4.25779292e-01},
    { 1.92977649e+00,  0.00000000e+00, -3.68124553e-01},
    { 1.95105652e+00,  0.00000000e+00, -3.09016994e-01},
    { 1.96858316e+00,  0.00000000e+00, -2.48689887e-01},
    { 1.98228725e+00,  0.00000000e+00, -1.87381315e-01},
    { 1.99211470e+00,  0.00000000e+00, -1.25333234e-01},
    { 1.99802673e+00,  0.00000000e+00, -6.27905195e-02}};
    vector<vector<double>> wire2 = {{0,0,-100},{0,0,100}};
    vector<vector<double>> r = {{1,0,0}};
    vector<vector<double>> r2 = {{1,0,1}};
    double I = 1;
    auto start = chrono::high_resolution_clock::now();
    vector<vector<double>> MagneticFields = BiotSavart(wire2,r2,I);
    auto stop = chrono::high_resolution_clock::now();
    auto duration = chrono::duration_cast<chrono::microseconds>(stop - start);
    for (vector<double> MagneticField : MagneticFields){
        cout << "\nMagnetic Field: (" << MagneticField[0] << ", " << MagneticField[1] << ", " << MagneticField[2] << ")" << endl;
    }
    cout << "Time taken by BiotSavart: " << duration.count()/1e6 << " seconds\n" << endl;
 
    return 0;
}